---
- name: Make sure that the company was provided.
  ansible.builtin.assert:
    that: blockchain_node_company | length > 1
    quiet: true

- name: Make sure blockchain_node_last is less than 751.
  ansible.builtin.assert:
    that: "{{ blockchain_node_last < 751 }}"
    quiet: true

- name: Make sure that file was provided when not URL.
  ansible.builtin.assert:
    that: "{{ blockchain_node_file | length > 1 }}"
    quiet: true
  when: blockchain_node_url | length == 0

- name: Make sure that URL was provided when not file.
  ansible.builtin.assert:
    that: "{{ blockchain_node_url | length > 1 }}"
    quiet: true
  when: blockchain_node_file | length == 0

- name: Set config environment if email was provided.
  ansible.builtin.set_fact:
    node_config_env:
      NODE_EMAIL: "{{ blockchain_node_email }}"
      NODE_PASSWORD: "{{ blockchain_node_password }}"
  when:
    - blockchain_node_email | length > 1
    - blockchain_node_password | length > 1

# If email, password, and firebase ID are all provided,
# this will take precedence as it was set last.
- name: Set config environment if Firebase ID was provided.
  ansible.builtin.set_fact:
    node_config_env:
      NODE_USER_ID: "{{ blockchain_node_firebase_id }}"
  when:
    - blockchain_node_firebase_id | length > 1

- name: Make sure the config environment got set.
  ansible.builtin.assert:
    that: node_config_env is defined
    fail_msg: "Either a Firebase ID or an email and password must be provided."
    quiet: true

- name: Install sudo.
  ansible.builtin.apt:
    name: sudo
    cache_valid_time: 3600
    state: present

- name: Get the blockchain node software.
  ansible.builtin.get_url:
    url: "{{ blockchain_node_url }}"
    dest: /usr/local/bin/{{ blockchain_node_name }}
    dest: /usr/local/bin/{{ blockchain_node_name }}
    # validate_certs: false
    mode: "0755"
  when:
    - blockchain_node_url | length > 1
    - blockchain_node_file | length == 0

- name: Copy up the node software.
  ansible.builtin.copy:
    dest: /usr/local/bin/{{ blockchain_node_name }}
    dest: /usr/local/bin/{{ blockchain_node_name }}
    src: "{{ blockchain_node_file }}"
    mode: "0755"
  when: blockchain_node_file | length > 1

- name: Create all the directories for the local config key files.
  ansible.builtin.file:
    path: "{{ blockchain_node_local_keys_dir }}/{{ inventory_hostname }}"
    state: directory
    mode: "0755"
  delegate_to: localhost

# Using an include here, because the with_sequence gets tried even if the when is false and errors out
- name: Include the add_node tasks.
  ansible.builtin.include_tasks: 'add_nodes.yml'
  loop: "{{ range(blockchain_node_first, blockchain_node_last + 1) }}"
  loop_control:
    loop_var: node_num
    label: "{{ '%03d' | format(node_num) }}"
    loop_var: node_num
    label: "{{ '%03d' | format(node_num) }}"

# Using an include here, because the with_sequence gets tried even if the when is false and errors out
- name: Include the del_node tasks.
  ansible.builtin.include_tasks: 'del_nodes.yml'
  loop: "{{ range(blockchain_node_last + 1, blockchain_node_cleanup + 1) }}"
  loop_control:
    loop_var: node_num
    label: "{{ '%03d' | format(node_num) }}"
  when: blockchain_node_last < blockchain_node_cleanup
